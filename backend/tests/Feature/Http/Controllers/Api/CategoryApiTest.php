<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Http\Resources\CategoryResource;
use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Traits\TestApiResources;
use Tests\Traits\TestValidations;
use Tests\Types\InvalidationTypes;

class CategoryApiTest extends TestCase
{

    use DatabaseMigrations;

    use TestValidations;
    use TestApiResources;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndex()
    {
        $category = factory(Category::class)->create();
        $response = $this->get(route('categories.index'));
        $this->assertOk($response, ['data' => [$category->toArray()]]);

        $response->assertJsonStructure([
            'data' => [],
            'links' => [],
            'meta' => [],
        ])->assertJson([
            'meta' => ['per_page' => 15]
        ]);
        $resource = CategoryResource::collection(collect([$category]));

        $json = $resource->response();
        $response->assertJson($json->getData(true));
    }

    public function testShow()
    {
        $category = factory(Category::class)->create();
        $response = $this->get(route('categories.show', ['category' => $category->id]));
        $this->assertOk($response, ['data' => $category->toArray()]);

        $category = Category::find($response->json('data.id'));
        $this->assertApiResource($response, CategoryResource::class, $category);
    }

    public function testInvalidationData()
    {
        $this->assertInvalidationInStoreAction(route('categories.store'), [],[
            new InvalidationTypes('name', 'required')
        ]);

        $this->assertInvalidationInStoreAction(route('categories.store'),[
            'name' => str_repeat('a', 256),
            'is_active' => 'a'
        ],[
            new InvalidationTypes('name', 'max.string', ['max' => 255]),
            new InvalidationTypes('is_active', 'boolean'),
        ]);

        $category = factory(Category::class)->create();
        $this->assertInvalidationInUpdateAction(route('categories.update', ['category' => $category->id]), [
            'name' => str_repeat('a', 256),
            'is_active' => 'a'
        ],[
            new InvalidationTypes('name', 'max.string', ['max' => 255]),
            new InvalidationTypes('is_active', 'boolean'),
        ]);
    }

    public function testStore()
    {
        $response = $this->json('POST', route('categories.store'), [
            'name' => 'test 1'
        ]);
        /** @var Category $category */
        $category = Category::find($response->json('data.id'));
        $this->assertOk($response, ['data' => $category->toArray()], 201);
        $this->assertTrue($response->json('data.is_active'));
        $this->assertNull($response->json('data.description'));
        $this->assertApiResource($response, CategoryResource::class, $category);
//
        $response = $this->json('POST', route('categories.store'), [
            'name' => 'test 2',
            'is_active' => false,
            'description' => 'test'
        ]);
        $category = Category::find($response->json('data.id'));
        $this->assertFalse($response->json('data.is_active'));
        $this->assertEquals('test', $response->json('data.description'));
        $this->assertApiResource($response, CategoryResource::class, $category);
    }

    public function testUpdate()
    {
        $category = factory(Category::class)->create([
            'name' => 'creating',
            'is_active' => false,
            'description' => 'creating'
        ]);
        $response = $this->json('PUT', route('categories.update', ['category' => $category->id]), [
            'name' => 'updating',
            'is_active' => true,
            'description' => 'updating'
        ]);
        $category = Category::find($response->json('data.id'));
        $this->assertOk($response, ['data' => $category->toArray()]);
        $response
            ->assertJsonFragment([
                'description' => 'updating',
                'is_active' => true
            ]);
        $this->assertApiResource($response, CategoryResource::class, $category);
    }

    public function testDelete()
    {
        $category = factory(Category::class)->create([
            'name' => 'deleting'
        ]);
        $category->refresh();
        $id = $category->id;
        $response = $this->json('DELETE', route('categories.destroy', ['category' => $id]));
        $response->assertStatus(204);
        $this->assertNull(Category::find($id));
        $this->assertNotNull(Category::withTrashed()->find($id));

        $response = $this->json('DELETE', route('categories.destroy', ['category' => $id]));
        $response->assertStatus(404);
    }

}
