<?php

namespace Tests\Feature\Models;

use App\Models\Category;
use App\Models\Genre;
use App\Models\Video;
use Ramsey\Uuid\Uuid;
use Tests\Feature\Models\Video\BaseVideoTestCase;

class VideoCrudTest extends BaseVideoTestCase
{

    private $fileFieldsData = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        foreach (Video::$fileFields as $field) {
            $this->fileFieldsData[$field] = "$field.test";
        }
    }

    public function testCreateNewVideo()
    {
        factory(Video::class, 1)->create();
        $videos = Video::all();
        $this->assertCount(1, $videos);

        $keys = array_keys($videos->first()->getAttributes());
        $this->assertEqualsCanonicalizing(
            [
                'id', 'title', 'description', 'year_launched', 'opened', 'rating', 'duration',
                'created_at', 'updated_at', 'deleted_at', 'video_file', 'thumb_file', 'banner_file', 'trailer_file'],
            $keys
        );
    }

    public function testCreateWithBasicFields()
    {
        $video = Video::create([
            'title' => 'video de teste',
            'description' => '$faker->sentence(10)',
            'year_launched' => rand(1985, 2020),
            'opened' => 1,
            'rating' => 'L',
            'duration' => rand(1, 120),
        ]);
        $video->refresh();
        $this->assertEquals('video de teste', $video->title);
        $this->assertTrue($video->opened);
        $this->assertTrue(Uuid::isValid($video->id));

        $video = Video::create([
            'title' => 'video de teste',
            'description' => '$faker->sentence(10)',
            'year_launched' => rand(1985, 2020),
            'opened' => 0,
            'rating' => 'L',
            'duration' => rand(1, 120),
        ]);
        $video->refresh();
        $this->assertFalse($video->opened);
        $this->assertTrue(Uuid::isValid($video->id));
    }

    public function testUpdateWithBasicFields()
    {
        $video = factory(Video::class)->create([
            'title' => 'video de teste',
            'description' => '$faker->sentence(10)',
            'year_launched' => rand(1985, 2020),
            'opened' => 0,
            'rating' => 'L',
            'duration' => rand(1, 120),
        ])->first();
        $data = [
            'title' => 'video de teste update',
            'opened' => 1,
        ];
        $video->update($data + $this->fileFieldsData);
        foreach ($data as $key => $value) {
            $this->assertEquals($value, $video->{$key});
        }
    }

    public function testDeleteVideo()
    {
        $videos = factory(Video::class, 5)->create();
        $count = 5;
        foreach ($videos as $video) {
            $count--;
            $id = $video->id;
            $this->assertTrue($video->delete($id));
            $this->assertCount($count, Video::all());
        }
        $this->assertCount(0, Video::all());
    }

    public function testSync()
    {
        $video = factory(Video::class)->create([
            'title' => 'test up',
            'description' => 'test up',
            'year_launched' => 1999,
            'rating' => '14',
            'duration' => 90,
            'opened' => true,
        ]);
        $video->refresh();
        $this->assertCount(1, $video::all());
        Video::handleRelations($video, []);
        $this->assertCount(0, $video->categories);
        $this->assertCount(0, $video->genres);
        $category = factory(Category::class)->create();
        Video::handleRelations($video, ['categories_id' => $category->id]);
        $video->refresh();
        $this->assertCount(1, $video->categories);
        $genre = factory(Genre::class)->create();
        Video::handleRelations($video, ['genres_id' => $genre->id]);
        $video->refresh();
        $this->assertCount(1, $video->genres);
        $video->categories()->delete();
        $video->genres()->delete();
        Video::handleRelations($video, ['categories_id' => $category->id, 'genres_id' => $genre->id]);
        $this->assertCount(1, $video->categories);
        $this->assertCount(1, $video->genres);
    }

    public function testSyncCategories()
    {
        $categoryId = factory(Category::class, 3)->create()->pluck('id')->toArray();
        $video = factory(Video::class)->create([
            'title' => 'test up',
            'description' => 'test up',
            'year_launched' => 1999,
            'rating' => '14',
            'duration' => 90,
            'opened' => true,
        ]);
        $video->refresh();
        Video::handleRelations($video, ['categories_id' => $categoryId[0]]);
        $this->assertDatabaseHas('category_video', ['category_id' => $categoryId[0], 'video_id' => $video->id]);
        Video::handleRelations($video, ['categories_id' => [$categoryId[1], $categoryId[2]]]);
        $this->assertDatabaseMissing('category_video', ['category_id' => $categoryId[0], 'video_id' => $video->id]);
        $this->assertDatabaseHas('category_video', ['category_id' => $categoryId[1], 'video_id' => $video->id]);
        $this->assertDatabaseHas('category_video', ['category_id' => $categoryId[2], 'video_id' => $video->id]);
    }

    public function testSyncGenres()
    {
        $genres = factory(Genre::class, 3)->create()->pluck('id')->toArray();
        $video = factory(Video::class)->create([
            'title' => 'test up',
            'description' => 'test up',
            'year_launched' => 1999,
            'rating' => '14',
            'duration' => 90,
            'opened' => true,
        ]);
        $video->refresh();
        Video::handleRelations($video, ['genres_id' => $genres[0]]);
        $this->assertDatabaseHas('genre_video', ['genre_id' => $genres[0], 'video_id' => $video->id]);
        Video::handleRelations($video, ['genres_id' => [$genres[1], $genres[2]]]);
        $this->assertDatabaseMissing('genre_video', ['genre_id' => $genres[0], 'video_id' => $video->id]);
        $this->assertDatabaseHas('genre_video', ['genre_id' => $genres[1], 'video_id' => $video->id]);
        $this->assertDatabaseHas('genre_video', ['genre_id' => $genres[2], 'video_id' => $video->id]);
    }

    public function testRollbackCreate()
    {
        $hasError = false;
        try {
            Video::create([
                'title' => 'test up',
                'description' => 'test up',
                'year_launched' => 1999,
                'rating' => '14',
                'duration' => 90,
                'categories_id' => ['32'],
            ]);
        } catch (\Exception $e) {
            $this->assertCount(0, Video::all());
            $hasError = true;
        }
        $this->assertTrue($hasError);
    }

    public function testRollbackUpdate()
    {
        $video = factory(Video::class)->create();
        $oldTitle = $video->title;
        try {
            $video->update([
                'title' => 'test up',
                'description' => 'test up',
                'year_launched' => 1999,
                'rating' => '14',
                'duration' => 90,
                'categories_id' => ['32'],
            ]);
        } catch (\Exception $e) {
            $this->assertCount(1, Video::all());
            $this->assertDatabaseHas('videos', [
                'title' => $oldTitle
            ]);
            $hasError = true;
        }
        $this->assertTrue($hasError);
    }
}
